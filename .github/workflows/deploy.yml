name: Deploy Infrastructure and Apps

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform:
    name: Infra Provisioning
    runs-on: ubuntu-latest
    outputs:
      static_site_bucket_name: ${{ steps.exports.outputs.STATIC_SITE_BUCKET_NAME }}
      region: ${{ steps.exports.outputs.REGION }}
      ecr_repository_url: ${{ steps.exports.outputs.ECR_REPOSITORY_URL }}
      ec2_instance_ids: ${{ steps.exports.outputs.EC2_INSTANCE_IDS }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies lambda func
        run: npm install
        working-directory: ./apps/orders-process-func

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve
        working-directory: ./terraform
        id: terraform-apply

      - name: Exports
        id: exports
        working-directory: ./terraform
        run: |
          echo "STATIC_SITE_BUCKET_NAME=$(terraform output -raw static_site_bucket_name)" >> $GITHUB_OUTPUT
          echo "REGION=$(terraform output -raw region)" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
          echo "EC2_INSTANCE_IDS=$(terraform output -json ec2_instance_ids)" >> $GITHUB_OUTPUT

  build_and_deploy_react_app:
    needs: terraform
    name: Build and Deploy React App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install dependencies
        run: npm install
        working-directory: ./apps/web-app

      - name: Build React App
        run: npm run build
        working-directory: ./apps/web-app

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.terraform.outputs.region }}

      - name: Deploy to S3
        run: aws s3 sync --delete build s3://${{ needs.terraform.outputs.static_site_bucket_name }}/
        working-directory: ./apps/web-app

  build_and_push_api:
    needs: terraform
    name: Build API Image and push to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.terraform.outputs.region }}

      - name: Login to ECR
        run: aws ecr get-login-password --region ${{ needs.terraform.outputs.region }} | docker login --username AWS --password-stdin ${{ needs.terraform.outputs.ecr_repository_url }}

      - name: Build Docker Image
        run: docker build -t ${{ needs.terraform.outputs.ecr_repository_url }} .
        working-directory: ./apps/api

      - name: Push Docker Image
        run: docker push ${{ needs.terraform.outputs.ecr_repository_url }}
        working-directory: ./apps/api

  deploy_api:
    needs: [terraform, build_and_push_api]
    name: Deploy API
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ec2_instance_ids: ${{ fromJson(needs.terraform.outputs.ec2_instance_ids) }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ needs.terraform.outputs.region }}

      - name: Run /home/ec2-user/app/deploy.sh with SSM
        run: |
          aws ssm send-command --document-name "AWS-RunShellScript" --instance-id ${{ matrix.ec2_instance_ids }} --parameters commands=["sudo /etc/deploy.sh"] --output text

